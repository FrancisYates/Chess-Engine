using ChessUI.Engine;
using System;
using System.Collections.Generic;
using System.Linq;

namespace ChessUI
{
    public static class LookUps
    {
        #region pawnAttackOffset
        public readonly static int[,][] pawnAttackOffset = { { new int[] { -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9 }, new int[] { -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9 }, new int[] { -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9 }, new int[] { -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9 }, new int[] { -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9 }, new int[] { -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9 }, new int[] { -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9 }, new int[] { -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 }, new int[] { -9, -7 } }, { new int[] { 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7 }, new int[] { 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7 }, new int[] { 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7 }, new int[] { 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7 }, new int[] { 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7 }, new int[] { 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7 }, new int[] { 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7 }, new int[] { 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 }, new int[] { 7, 9 } } };

        public readonly static ulong[] whitePawnAttackBitBoard = [512ul, 1280ul, 2560ul, 5120ul, 10240ul, 20480ul, 40960ul, 16384ul, 131072ul, 327680ul, 655360ul, 1310720ul, 2621440ul, 5242880ul, 10485760ul, 4194304ul, 33554432ul, 83886080ul, 167772160ul, 335544320ul, 671088640ul, 1342177280ul, 2684354560ul, 1073741824ul, 8589934592ul, 21474836480ul, 42949672960ul, 85899345920ul, 171798691840ul, 343597383680ul, 687194767360ul, 274877906944ul, 2199023255552ul, 5497558138880ul, 10995116277760ul, 21990232555520ul, 43980465111040ul, 87960930222080ul, 175921860444160ul, 70368744177664ul, 562949953421312ul, 1407374883553280ul, 2814749767106560ul, 5629499534213120ul, 11258999068426240ul, 22517998136852480ul, 45035996273704960ul, 18014398509481984ul, 144115188075855872ul, 360287970189639680ul, 720575940379279360ul, 1441151880758558720ul, 2882303761517117440ul, 5764607523034234880ul, 11529215046068469760ul, 0ul, 0ul, 0ul, 0ul, 0ul, 0ul, 0ul, 0ul, 0ul];
        public readonly static ulong[] blackPawnAttackBitBoard = [0ul, 0ul, 0ul, 0ul, 0ul, 0ul, 0ul, 0ul, 2ul, 5ul, 10ul, 20ul, 40ul, 80ul, 160ul, 64ul, 512ul, 1280ul, 2560ul, 5120ul, 10240ul, 20480ul, 40960ul, 16384ul, 131072ul, 327680ul, 655360ul, 1310720ul, 2621440ul, 5242880ul, 10485760ul, 4194304ul, 33554432ul, 83886080ul, 167772160ul, 335544320ul, 671088640ul, 1342177280ul, 2684354560ul, 1073741824ul, 8589934592ul, 21474836480ul, 42949672960ul, 85899345920ul, 171798691840ul, 343597383680ul, 687194767360ul, 274877906944ul, 2199023255552ul, 5497558138880ul, 10995116277760ul, 21990232555520ul, 43980465111040ul, 87960930222080ul, 175921860444160ul, 70368744177664ul, 562949953421312ul, 1407374883553280ul, 2814749767106560ul, 5629499534213120ul, 11258999068426240ul, 22517998136852480ul, 45035996273704960ul, 18014398509481984ul];
        #endregion pawnAttackOffset

        #region knightOffset
        public readonly static int[][] knightOffset = {new int[] {17, 10}, new int[] {15, 17, 10}, new int[] {15, 17, 10, 6}, new int[] {15, 17, 10, 6}, new int[] {15, 17, 10, 6}, new int[] {15, 17, 10, 6}, new int[] {15, 17, 6}, new int[] {15, 6}, new int[] {17, 10, -6}, new int[] {15, 17, 10, -6}, new int[] {15, 17, 10, -6, -10, 6}, new int[] {15, 17, 10, -6, -10, 6}, new int[] {15, 17, 10, -6, -10, 6}, new int[] {15, 17, 10, -6, -10, 6}, new int[] {15, 17, -10, 6}, new int[] {15, -10, 6}, new int[] {17, 10, -6, -15}, new int[] {15, 17, 10, -6, -15, -17}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, -15, -17, -10, 6}, new int[] {15, -17, -10, 6}, new int[] {17, 10, -6, -15}, new int[] {15, 17, 10, -6, -15, -17}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, -15, -17, -10, 6}, new int[] {15, -17, -10, 6}, new int[] {17, 10, -6, -15}, new int[] {15, 17, 10, -6, -15, -17}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, -15, -17, -10, 6}, new int[] {15, -17, -10, 6}, new int[] {17, 10, -6, -15}, new int[] {15, 17, 10, -6, -15, -17}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, 10, -6, -15, -17, -10, 6}, new int[] {15, 17, -15, -17, -10, 6}, new int[] {15, -17, -10, 6}, new int[] {10, -6, -15}, new int[] {10, -6, -15, -17}, new int[] {10, -6, -15, -17, -10, 6}, new int[] {10, -6, -15, -17, -10, 6}, new int[] {10, -6, -15, -17, -10, 6}, new int[] {10, -6, -15, -17, -10, 6}, new int[] {-15, -17, -10, 6}, new int[] {-17, -10, 6}, new int[] {-6, -15}, new int[] {-6, -15, -17}, new int[] {-6, -15, -17, -10}, new int[] {-6, -15, -17, -10}, new int[] {-6, -15, -17, -10}, new int[] {-6, -15, -17, -10}, new int[] {-15, -17, -10}, new int[] {-17, -10}};
        public readonly static ulong[] knightMoveBitboards = [132096ul, 329728ul, 659712ul, 1319424ul, 2638848ul, 5277696ul, 10489856ul, 4202496ul, 33816580ul, 84410376ul, 168886289ul, 337772578ul, 675545156ul, 1351090312ul, 2685403152ul, 1075839008ul, 8657044482ul, 21609056261ul, 43234889994ul, 86469779988ul, 172939559976ul, 345879119952ul, 687463207072ul, 275414786112ul, 2216203387392ul, 5531918402816ul, 11068131838464ul, 22136263676928ul, 44272527353856ul, 88545054707712ul, 175990581010432ul, 70506185244672ul, 567348067172352ul, 1416171111120896ul, 2833441750646784ul, 5666883501293568ul, 11333767002587136ul, 22667534005174272ul, 45053588738670592ul, 18049583422636032ul, 145241105196122112ul, 362539804446949376ul, 725361088165576704ul, 1450722176331153408ul, 2901444352662306816ul, 5802888705324613632ul, 11533718717099671552ul, 4620693356194824192ul, 288234782788157440ul, 576469569871282176ul, 1224997833292120064ul, 2449995666584240128ul, 4899991333168480256ul, 9799982666336960512ul, 1152939783987658752ul, 2305878468463689728ul, 1128098930098176ul, 2257297371824128ul, 4796069720358912ul, 9592139440717824ul, 19184278881435648ul, 38368557762871296ul, 4679521487814656ul, 9077567998918656ul];
        #endregion knightOffset

        #region kingOffset
        public readonly static int[][] kingOffset = {[8, 1, 9], [8, -1, 1, 7, 9], [8, -1, 1, 7, 9], [8, -1, 1, 7, 9], [8, -1, 1, 7, 9], [8, -1, 1, 7, 9], [8, -1, 1, 7, 9], [8, -1, 7], [8, -8, 1, 9, -7], [8, -8, -1, 1, 7, 9, -7, -9], [8, -8, -1, 1, 7, 9, -7, -9], [8, -8, -1, 1, 7, 9, -7, -9], [8, -8, -1, 1, 7, 9, -7, -9], [8, -8, -1, 1, 7, 9, -7, -9], new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, [8, -8, -1, 7, -9], new int[] { 8, -8, 1, 9, -7 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 7, -9 }, new int[] { 8, -8, 1, 9, -7 }, new int[] {8, -8, -1, 1, 7, 9, -7, -9}, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 7, -9 }, new int[] { 8, -8, 1, 9, -7 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 7, -9 }, new int[] { 8, -8, 1, 9, -7 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 7, -9 }, new int[] { 8, -8, 1, 9, -7 }, new int[] {8, -8, -1, 1, 7, 9, -7, -9}, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 1, 7, 9, -7, -9 }, new int[] { 8, -8, -1, 7, -9 }, new int[] { -8, 1, -7 }, new int[] { -8, -1, 1, -7, -9 }, new int[] { -8, -1, 1, -7, -9 }, new int[] { -8, -1, 1, -7, -9 }, new int[] { -8, -1, 1, -7, -9 }, new int[] { -8, -1, 1, -7, -9 }, new int[] { -8, -1, 1, -7, -9 }, new int[] { -8, -1, -9 }};
        public readonly static ulong[] kingMoveBitboards = [770ul, 1797ul, 3594ul, 7188ul, 14376ul, 28752ul, 57504ul, 49216ul, 197123ul, 460039ul, 920078ul, 1840156ul, 3680312ul, 7360624ul, 14721248ul, 12599488ul, 50463488ul, 117769984ul, 235539968ul, 471079936ul, 942159872ul, 1884319744ul, 3768639488ul, 3225468928ul, 12918652928ul, 30149115904ul, 60298231808ul, 120596463616ul, 241192927232ul, 482385854464ul, 964771708928ul, 825720045568ul, 3307175149568ul, 7718173671424ul, 15436347342848ul, 30872694685696ul, 61745389371392ul, 123490778742784ul, 246981557485568ul, 211384331665408ul, 846636838289408ul, 1975852459884544ul, 3951704919769088ul, 7903409839538176ul, 15806819679076352ul, 31613639358152704ul, 63227278716305408ul, 54114388906344448ul, 216739030602088448ul, 505818229730443264ul, 1011636459460886528ul, 2023272918921773056ul, 4046545837843546112ul, 8093091675687092224ul, 16186183351374184448ul, 13853283560024178688ul, 144959613005987840ul, 362258295026614272ul, 724516590053228544ul, 1449033180106457088ul, 2898066360212914176ul, 5796132720425828352ul, 11592265440851656704ul, 4665729213955833856ul];
        public const ulong whiteKingSideCastleKingPath = 96ul;
        public const ulong whiteQueenSideCastleKingPath = 12ul;
        public const ulong whiteQueenSideCastlePath = 14ul;
        public const ulong blackKingSideCastleKingPath = 6917529027641081856ul;
        public const ulong blackQueenSideCastleKingPath = 864691128455135232ul;
        public const ulong blackQueenSideCastlePath = 1008806316530991104ul;

        #endregion kingOffset

        public readonly static ulong castleStoppingRookCaptures = 9295429630892703873ul;
        public static readonly ulong[] rookMoveBitboards = [72340172838076926ul, 144680345676153597ul, 289360691352306939ul, 578721382704613623ul, 1157442765409226991ul, 2314885530818453727ul, 4629771061636907199ul, 9259542123273814143ul, 72340172838141441ul, 144680345676217602ul, 289360691352369924ul, 578721382704674568ul, 1157442765409283856ul, 2314885530818502432ul, 4629771061636939584ul, 9259542123273813888ul, 72340172854657281ul, 144680345692602882ul, 289360691368494084ul, 578721382720276488ul, 1157442765423841296ul, 2314885530830970912ul, 4629771061645230144ul, 9259542123273748608ul, 72340177082712321ul, 144680349887234562ul, 289360695496279044ul, 578721386714368008ul, 1157442769150545936ul, 2314885534022901792ul, 4629771063767613504ul, 9259542123257036928ul, 72341259464802561ul, 144681423712944642ul, 289361752209228804ul, 578722409201797128ul, 1157443723186933776ul, 2314886351157207072ul, 4629771607097753664ul, 9259542118978846848ul, 72618349279904001ul, 144956323094725122ul, 289632270724367364ul, 578984165983651848ul, 1157687956502220816ul, 2315095537539358752ul, 4629910699613634624ul, 9259541023762186368ul, 143553341945872641ul, 215330564830528002ul, 358885010599838724ul, 645993902138460168ul, 1220211685215703056ul, 2368647251370188832ul, 4665518383679160384ul, 9259260648297103488ul, 18302911464433844481ul, 18231136449196065282ul, 18087586418720506884ul, 17800486357769390088ul, 17226286235867156496ul, 16077885992062689312ul, 13781085504453754944ul, 9187484529235886208ul];
        public static readonly ulong[] rookOccupancyBitboards = [282578800148862ul, 565157600297596ul, 1130315200595066ul, 2260630401190006ul, 4521260802379886ul, 9042521604759646ul, 18085043209519166ul, 36170086419038334ul, 282578800180736ul, 565157600328704ul, 1130315200625152ul, 2260630401218048ul, 4521260802403840ul, 9042521604775424ul, 18085043209518592ul, 36170086419037696ul, 282578808340736ul, 565157608292864ul, 1130315208328192ul, 2260630408398848ul, 4521260808540160ul, 9042521608822784ul, 18085043209388032ul, 36170086418907136ul, 282580897300736ul, 565159647117824ul, 1130317180306432ul, 2260632246683648ul, 4521262379438080ul, 9042522644946944ul, 18085043175964672ul, 36170086385483776ul, 283115671060736ul, 565681586307584ul, 1130822006735872ul, 2261102847592448ul, 4521664529305600ul, 9042787892731904ul, 18085034619584512ul, 36170077829103616ul, 420017753620736ul, 699298018886144ul, 1260057572672512ul, 2381576680245248ul, 4624614895390720ul, 9110691325681664ul, 18082844186263552ul, 36167887395782656ul, 35466950888980736ul, 34905104758997504ul, 34344362452452352ul, 33222877839362048ul, 30979908613181440ul, 26493970160820224ul, 17522093256097792ul, 35607136465616896ul, 9079539427579068672ul, 8935706818303361536ul, 8792156787827803136ul, 8505056726876686336ul, 7930856604974452736ul, 6782456361169985536ul, 4485655873561051136ul, 9115426935197958144ul];
        public const ulong rank1 = 255;
        public const ulong fileA = 72340172838076673;
        public const ulong diagonalUp = 9241421688590303745ul;
        public const ulong diagonalDown = 72624976668147840ul;

        public static readonly ulong[] bishopMoves = [9241421688590303744ul, 36099303471056128ul, 141012904249856ul, 550848566272ul, 6480472064ul, 1108177604608ul, 283691315142656ul, 72624976668147712ul, 4620710844295151618ul, 9241421688590368773ul, 36099303487963146ul, 141017232965652ul, 1659000848424ul, 283693466779728ul, 72624976676520096ul, 145249953336262720ul, 2310355422147510788ul, 4620710844311799048ul, 9241421692918565393ul, 36100411639206946ul, 424704217196612ul, 72625527495610504ul, 145249955479592976ul, 290499906664153120ul, 1155177711057110024ul, 2310355426409252880ul, 4620711952330133792ul, 9241705379636978241ul, 108724279602332802ul, 145390965166737412ul, 290500455356698632ul, 580999811184992272ul, 577588851267340304ul, 1155178802063085600ul, 2310639079102947392ul, 4693335752243822976ul, 9386671504487645697ul, 326598935265674242ul, 581140276476643332ul, 1161999073681608712ul, 288793334762704928ul, 577868148797087808ul, 1227793891648880768ul, 2455587783297826816ul, 4911175566595588352ul, 9822351133174399489ul, 1197958188344280066ul, 2323857683139004420ul, 144117404414255168ul, 360293502378066048ul, 720587009051099136ul, 1441174018118909952ul, 2882348036221108224ul, 5764696068147249408ul, 11529391036782871041ul, 4611756524879479810ul, 567382630219904ul, 1416240237150208ul, 2833579985862656ul, 5667164249915392ul, 11334324221640704ul, 22667548931719168ul, 45053622886727936ul, 18049651735527937ul];
        public static readonly ulong[] bishopOccupancyBitBoards = [18049651735527936ul, 70506452091904ul, 275415828992ul, 1075975168ul, 38021120ul, 8657588224ul, 2216338399232ul, 567382630219776ul, 9024825867763712ul, 18049651735527424ul, 70506452221952ul, 275449643008ul, 9733406720ul, 2216342585344ul, 567382630203392ul, 1134765260406784ul, 4512412933816832ul, 9024825867633664ul, 18049651768822272ul, 70515108615168ul, 2491752130560ul, 567383701868544ul, 1134765256220672ul, 2269530512441344ul, 2256206450263040ul, 4512412900526080ul, 9024834391117824ul, 18051867805491712ul, 637888545440768ul, 1135039602493440ul, 2269529440784384ul, 4539058881568768ul, 1128098963916800ul, 2256197927833600ul, 4514594912477184ul, 9592139778506752ul, 19184279556981248ul, 2339762086609920ul, 4538784537380864ul, 9077569074761728ul, 562958610993152ul, 1125917221986304ul, 2814792987328512ul, 5629586008178688ul, 11259172008099840ul, 22518341868716544ul, 9007336962655232ul, 18014673925310464ul, 2216338399232ul, 4432676798464ul, 11064376819712ul, 22137335185408ul, 44272556441600ul, 87995357200384ul, 35253226045952ul, 70506452091904ul, 567382630219776ul, 1134765260406784ul, 2832480465846272ul, 5667157807464448ul, 11333774449049600ul, 22526811443298304ul, 9024825867763712ul, 18049651735527936ul];

        public static readonly ulong[] queenMoves = [9313761861428380670ul, 180779649147209725ul, 289501704256556795ul, 578721933553179895ul, 1157442771889699055ul, 2314886638996058335ul, 4630054752952049855ul, 9332167099941961855ul, 4693051017133293059ul, 9386102034266586375ul, 325459994840333070ul, 578862399937640220ul, 1157444424410132280ul, 2315169224285282160ul, 4702396038313459680ul, 9404792076610076608ul, 2382695595002168069ul, 4765391190004401930ul, 9530782384287059477ul, 614821794359483434ul, 1157867469641037908ul, 2387511058326581416ul, 4775021017124823120ul, 9550042029937901728ul, 1227517888139822345ul, 2455035776296487442ul, 4910072647826412836ul, 9820426766351346249ul, 1266167048752878738ul, 2460276499189639204ul, 4920271519124312136ul, 9840541934442029200ul, 649930110732142865ul, 1299860225776030242ul, 2600000831312176196ul, 5272058161445620104ul, 10544115227674579473ul, 2641485286422881314ul, 5210911883574396996ul, 10421541192660455560ul, 361411684042608929ul, 722824471891812930ul, 1517426162373248132ul, 3034571949281478664ul, 6068863523097809168ul, 12137446670713758241ul, 5827868887957914690ul, 11583398706901190788ul, 287670746360127809ul, 575624067208594050ul, 1079472019650937860ul, 2087167920257370120ul, 4102559721436811280ul, 8133343319517438240ul, 16194909420462031425ul, 13871017173176583298ul, 18303478847064064385ul, 18232552689433215490ul, 18090419998706369540ul, 17806153522019305480ul, 17237620560088797200ul, 16100553540994408480ul, 13826139127340482880ul, 9205534180971414145ul];
        public static readonly ulong[] queenOccupancyBitBoards = [18332230535676798ul, 635664052389500ul, 1130590616424058ul, 2260631477165174ul, 4521260840401006ul, 9042530262347870ul, 18087259547918398ul, 36737469049258110ul, 9307404667944448ul, 18614809335856128ul, 1200821652847104ul, 2260905850861056ul, 4521270535810560ul, 9044737947360768ul, 18652425839721984ul, 37304851679444480ul, 4794991742157568ul, 9589983475926528ul, 19179966977150464ul, 2331145517014016ul, 4523752560670720ul, 9609905310691328ul, 19219808465608704ul, 38439616931348480ul, 2538787347563776ul, 5077572547643904ul, 10155151571424256ul, 20312500052175360ul, 5159150924878848ul, 10177562247440384ul, 20354572616749056ul, 40709145267052544ul, 1411214634977536ul, 2821879514141184ul, 5645416919213056ul, 11853242626099200ul, 23705944086286848ul, 11382549979341824ul, 22623819156965376ul, 45247646903865344ul, 982976364613888ul, 1825215240872448ul, 4074850560001024ul, 8011162688423936ul, 15883786903490560ul, 31629033194398208ul, 27090181148918784ul, 54182561321093120ul, 35469167227379968ul, 34909537435795968ul, 34355426829272064ul, 33245015174547456ul, 31024181169623040ul, 26581965518020608ul, 17557346482143744ul, 35677642917708800ul, 9080106810209288448ul, 8936841583563768320ul, 8794989268293649408ul, 8510723884684150784ul, 7942190379423502336ul, 6804983172613283840ul, 4494680699428814848ul, 9133476586933486080ul];

        public const ulong innerSquares = 35604928818740736ul;
        public static Dictionary<(int sourceSquare, ulong blockerMask), ulong> RookMoveDict => _rookMoveDict.Value;
        public static Dictionary<(int sourceSquare, ulong blockerMask), ulong> BishopMoveDict => _bishopMoveDict.Value;

        private static Lazy<Dictionary<(int sourceSquare, ulong blockerMask), ulong>> _rookMoveDict = new(CreateRookMoveDict);
        private static Lazy<Dictionary<(int sourceSquare, ulong blockerMask), ulong>> _bishopMoveDict = new(CreateBishopMoveDict);
        public static Lazy<int[][]> SetByteIndexes = new(InitXXX);

        private static int[][] InitXXX()
        {
            var leaves = new int[256][];
            for (int i = 0; i < 256; ++i)
            {
                leaves[i] = Enumerable.Range(0, 8)
                                      .Where(b => (i & (1 << b)) != 0)
                                      .Select(b => b + 1)
                                      .ToArray();
            }
            return leaves;
        }

        private static Dictionary<(int, ulong), ulong> CreateRookMoveDict()
        {
            Dictionary <(int, ulong), ulong> moveDict = new();
            for(int i = 0; i < 64; i++)
            {
                ulong[] blockerMasks = CreateBlockerBitBoards(rookOccupancyBitboards[i]);
                foreach (var blockerMask in blockerMasks)
                {
                    ulong moveCandidates = CreateRookMoveCandidates(i, blockerMask);
                    moveDict.Add((i, blockerMask), moveCandidates);
                }
            }

            return moveDict;
        }

        private static ulong CreateRookMoveCandidates(int sourceSqaure, ulong blockers)
        {
            ulong candidateMask = 0ul;
            int x = sourceSqaure % 8;
            int y = sourceSqaure / 8;
            for (int i = 1; i < 8 - x; i++)
            {
                int target = sourceSqaure + i;
                ulong t = 1ul << target;
                candidateMask |= t;
                if ((t & blockers) > 0) break;
            }
            for (int i = 1; i < x + 1; i++)
            {
                int target = sourceSqaure - i;
                ulong t = 1ul << target;
                candidateMask |= t;
                if ((t & blockers) > 0) break;
            }

            for (int i = 1; i < 8 - y; i++)
            {
                int target = sourceSqaure + (i * 8);
                ulong t = 1ul << target;
                candidateMask |= t;
                if ((t & blockers) > 0) break;
            }
            for (int i = 1; i< y + 1; i++)
            {
                int target = sourceSqaure - (i * 8);
                ulong t = 1ul << target;
                candidateMask |= t;
                if ((t & blockers) > 0) break;
            }
            return candidateMask;
        }

        private static Dictionary<(int, ulong), ulong> CreateBishopMoveDict()
        {
            Dictionary<(int, ulong), ulong> moveDict = new();
            for (int i = 0; i < 64; i++)
            {
                ulong[] blockerMasks = CreateBlockerBitBoards(bishopOccupancyBitBoards[i]);
                foreach (var blockerMask in blockerMasks)
                {
                    ulong moveCandidates = CreateBishopMoveCandidates(i, blockerMask);
                    moveDict.Add((i, blockerMask), moveCandidates);
                }
            }

            return moveDict;
        }
        private static ulong CreateBishopMoveCandidates(int sourceSqaure, ulong blockers)
        {
            ulong candidateMask = 0ul;
            int x = sourceSqaure % 8;
            int y = sourceSqaure / 8;

            for (int i = 1; i < Math.Min(8 - x, 8 - y); i++)
            {
                int target = sourceSqaure + i + (i*8);
                ulong t = 1ul << target;
                candidateMask |= t;
                if ((t & blockers) > 0) break;
            }
            for (int i = 1; i < Math.Min(8 - x, y + 1); i++)
            {
                int target = sourceSqaure + i - (i*8);
                ulong t = 1ul << target;
                candidateMask |= t;
                if ((t & blockers) > 0) break;
            }

            for (int i = 1; i < Math.Min(x+1, 8 - y); i++)
            {
                int target = sourceSqaure - i + (i * 8);
                ulong t = 1ul << target;
                candidateMask |= t;
                if ((t & blockers) > 0) break;
            }
            for (int i = 1; i< Math.Min(x+1, y+1); i++)
            {
                int target = sourceSqaure - (i+(i * 8));
                ulong t = 1ul << target;
                candidateMask |= t;
                if ((t & blockers) > 0) break;
            }
            return candidateMask;
        }

        private static Dictionary<(int, ulong), ulong> CreateQueenMoveDict()
        {
            Dictionary<(int, ulong), ulong> moveDict = new();
            for (int i = 0; i < 64; i++)
            {
                ulong[] blockerMasks = CreateBlockerBitBoards(queenOccupancyBitBoards[i]);
                foreach (var blockerMask in blockerMasks)
                {
                    ulong moveCandidates = CreateQueenMoveCandidates(i, blockerMask);
                    moveDict.Add((i, blockerMask), moveCandidates);
                }
            }

            return moveDict;
        }
        private static ulong CreateQueenMoveCandidates(int sourceSqaure, ulong blockers)
        {
            ulong rookMask = CreateRookMoveCandidates(sourceSqaure, blockers);
            ulong bishopMask = CreateBishopMoveCandidates(sourceSqaure, blockers);
            return rookMask | bishopMask;
        }
        private static ulong[] CreateBlockerBitBoards(ulong moveMask)
        {
            List<int> indecies = MoveGeneration.GetPoistionsFromBitboard(moveMask).ToList();

            int numPossibleMasks = 1 << indecies.Count;
            var blockerBitBoards = new ulong[numPossibleMasks];

            for (int i = 0; i < numPossibleMasks; i++)
            {
                for (int j = 0; j < indecies.Count; j++)
                {
                    int bit = (i >> j) & 1;
                    blockerBitBoards[i] |= (ulong)bit << indecies[j];
                }
            }
            return blockerBitBoards;
        }

        #region dirextionIdx
        public static readonly int[,] directionIndex = new int[,] {{-1, 3, 3, 3, 3, 3, 3, 3, 0, 5, -1, -1, -1, -1, -1, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1, -1, -1, 0, -1, -1, -1, -1, 5, -1, -1, 0, -1, -1, -1, -1, -1, 5, -1, 0, -1, -1, -1, -1, -1, -1, 5}, {2, -1, 3, 3, 3, 3, 3, 3, 4, 0, 5, -1, -1, -1, -1, -1, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1, -1, -1, 0, -1, -1, -1, -1, 5, -1, -1, 0, -1, -1, -1, -1, -1, 5, -1, 0, -1, -1, -1, -1, -1, -1}, {2, 2, -1, 3, 3, 3, 3, 3, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1, -1, -1, 0, -1, -1, -1, -1, 5, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1}, {2, 2, 2, -1, 3, 3, 3, 3, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1}, {2, 2, 2, 2, -1, 3, 3, 3, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1, 5, 4, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1}, {2, 2, 2, 2, 2, -1, 3, 3, -1, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1, -1, 4, -1, -1, -1, 0, -1, -1, 4, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1}, {2, 2, 2, 2, 2, 2, -1, 3, -1, -1, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, -1, -1, -1, 4, -1, -1, 0, -1, -1, -1, 4, -1, -1, -1, 0, -1, -1, 4, -1, -1, -1, -1, 0, -1, 4, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1}, {2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, 4, 0, -1, -1, -1, -1, -1, 4, -1, 0, -1, -1, -1, -1, 4, -1, -1, 0, -1, -1, -1, 4, -1, -1, -1, 0, -1, -1, 4, -1, -1, -1, -1, 0, -1, 4, -1, -1, -1, -1, -1, 0, 4, -1, -1, -1, -1, -1, -1, 0}, {1, 7, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 0, 5, -1, -1, -1, -1, -1, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1, -1, -1, 0, -1, -1, -1, -1, 5, -1, -1, 0, -1, -1, -1, -1, -1, 5, -1}, {6, 1, 7, -1, -1, -1, -1, -1, 2, -1, 3, 3, 3, 3, 3, 3, 4, 0, 5, -1, -1, -1, -1, -1, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1, -1, -1, 0, -1, -1, -1, -1, 5, -1, -1, 0, -1, -1, -1, -1, -1, 5}, {-1, 6, 1, 7, -1, -1, -1, -1, 2, 2, -1, 3, 3, 3, 3, 3, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1, -1, -1, 0, -1, -1, -1, -1, 5, -1, -1, 0, -1, -1, -1, -1, -1}, {-1, -1, 6, 1, 7, -1, -1, -1, 2, 2, 2, -1, 3, 3, 3, 3, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1}, {-1, -1, -1, 6, 1, 7, -1, -1, 2, 2, 2, 2, -1, 3, 3, 3, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1, 5, 4, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1}, {-1, -1, -1, -1, 6, 1, 7, -1, 2, 2, 2, 2, 2, -1, 3, 3, -1, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1, -1, 4, -1, -1, -1, 0, -1, -1, 4, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1}, {-1, -1, -1, -1, -1, 6, 1, 7, 2, 2, 2, 2, 2, 2, -1, 3, -1, -1, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, -1, -1, -1, 4, -1, -1, 0, -1, -1, -1, 4, -1, -1, -1, 0, -1, -1, 4, -1, -1, -1, -1, 0, -1, 4, -1, -1, -1, -1, -1, 0, -1}, {-1, -1, -1, -1, -1, -1, 6, 1, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, 4, 0, -1, -1, -1, -1, -1, 4, -1, 0, -1, -1, -1, -1, 4, -1, -1, 0, -1, -1, -1, 4, -1, -1, -1, 0, -1, -1, 4, -1, -1, -1, -1, 0, -1, 4, -1, -1, -1, -1, -1, 0}, {1, -1, 7, -1, -1, -1, -1, -1, 1, 7, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 0, 5, -1, -1, -1, -1, -1, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1, -1, -1, 0, -1, -1, -1, -1, 5, -1, -1}, {-1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, -1, -1, 2, -1, 3, 3, 3, 3, 3, 3, 4, 0, 5, -1, -1, -1, -1, -1, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1, -1, -1, 0, -1, -1, -1, -1, 5, -1}, {6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, -1, 2, 2, -1, 3, 3, 3, 3, 3, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1, -1, -1, 0, -1, -1, -1, -1, 5}, {-1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, 2, 2, 2, -1, 3, 3, 3, 3, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1, -1, -1, 0, -1, -1, -1, -1}, {-1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, 2, 2, 2, 2, -1, 3, 3, 3, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1, 5, 4, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1}, {-1, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, 2, 2, 2, 2, 2, -1, 3, 3, -1, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1, -1, 4, -1, -1, -1, 0, -1, -1, 4, -1, -1, -1, -1, 0, -1, -1}, {-1, -1, -1, -1, 6, -1, 1, -1, -1, -1, -1, -1, -1, 6, 1, 7, 2, 2, 2, 2, 2, 2, -1, 3, -1, -1, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, -1, -1, -1, 4, -1, -1, 0, -1, -1, -1, 4, -1, -1, -1, 0, -1, -1, 4, -1, -1, -1, -1, 0, -1}, {-1, -1, -1, -1, -1, 6, -1, 1, -1, -1, -1, -1, -1, -1, 6, 1, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, 4, 0, -1, -1, -1, -1, -1, 4, -1, 0, -1, -1, -1, -1, 4, -1, -1, 0, -1, -1, -1, 4, -1, -1, -1, 0, -1, -1, 4, -1, -1, -1, -1, 0}, {1, -1, -1, 7, -1, -1, -1, -1, 1, -1, 7, -1, -1, -1, -1, -1, 1, 7, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 0, 5, -1, -1, -1, -1, -1, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1, -1, -1}, {-1, 1, -1, -1, 7, -1, -1, -1, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, -1, -1, 2, -1, 3, 3, 3, 3, 3, 3, 4, 0, 5, -1, -1, -1, -1, -1, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1, -1}, {-1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, -1, 2, 2, -1, 3, 3, 3, 3, 3, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5, -1}, {6, -1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, 2, 2, 2, -1, 3, 3, 3, 3, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1, 0, -1, -1, -1, 5}, {-1, 6, -1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, 2, 2, 2, 2, -1, 3, 3, 3, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1, 5, 4, -1, -1, -1, 0, -1, -1, -1}, {-1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, 2, 2, 2, 2, 2, -1, 3, 3, -1, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1, -1, 4, -1, -1, -1, 0, -1, -1}, {-1, -1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, -1, -1, -1, -1, -1, 6, 1, 7, 2, 2, 2, 2, 2, 2, -1, 3, -1, -1, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, -1, -1, -1, 4, -1, -1, 0, -1, -1, -1, 4, -1, -1, -1, 0, -1}, {-1, -1, -1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, -1, -1, -1, -1, -1, 6, 1, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, 4, 0, -1, -1, -1, -1, -1, 4, -1, 0, -1, -1, -1, -1, 4, -1, -1, 0, -1, -1, -1, 4, -1, -1, -1, 0}, {1, -1, -1, -1, 7, -1, -1, -1, 1, -1, -1, 7, -1, -1, -1, -1, 1, -1, 7, -1, -1, -1, -1, -1, 1, 7, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 0, 5, -1, -1, -1, -1, -1, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1, -1, -1}, {-1, 1, -1, -1, -1, 7, -1, -1, -1, 1, -1, -1, 7, -1, -1, -1, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, -1, -1, 2, -1, 3, 3, 3, 3, 3, 3, 4, 0, 5, -1, -1, -1, -1, -1, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1, -1}, {-1, -1, 1, -1, -1, -1, 7, -1, -1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, -1, 2, 2, -1, 3, 3, 3, 3, 3, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, -1, -1, -1, 0, -1, -1, 5, -1, -1}, {-1, -1, -1, 1, -1, -1, -1, 7, 6, -1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, 2, 2, 2, -1, 3, 3, 3, 3, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1, 5, -1}, {6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, 2, 2, 2, 2, -1, 3, 3, 3, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1, 5}, {-1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, 2, 2, 2, 2, 2, -1, 3, 3, -1, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, 4, -1, -1, 0, -1, -1}, {-1, -1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, -1, -1, -1, -1, -1, 6, 1, 7, 2, 2, 2, 2, 2, 2, -1, 3, -1, -1, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, -1, -1, -1, 4, -1, -1, 0, -1}, {-1, -1, -1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, -1, -1, -1, -1, -1, 6, 1, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, 4, 0, -1, -1, -1, -1, -1, 4, -1, 0, -1, -1, -1, -1, 4, -1, -1, 0}, {1, -1, -1, -1, -1, 7, -1, -1, 1, -1, -1, -1, 7, -1, -1, -1, 1, -1, -1, 7, -1, -1, -1, -1, 1, -1, 7, -1, -1, -1, -1, -1, 1, 7, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 0, 5, -1, -1, -1, -1, -1, -1, 0, -1, 5, -1, -1, -1, -1, -1}, {-1, 1, -1, -1, -1, -1, 7, -1, -1, 1, -1, -1, -1, 7, -1, -1, -1, 1, -1, -1, 7, -1, -1, -1, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, -1, -1, 2, -1, 3, 3, 3, 3, 3, 3, 4, 0, 5, -1, -1, -1, -1, -1, -1, 0, -1, 5, -1, -1, -1, -1}, {-1, -1, 1, -1, -1, -1, -1, 7, -1, -1, 1, -1, -1, -1, 7, -1, -1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, -1, 2, 2, -1, 3, 3, 3, 3, 3, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1, -1}, {-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 7, 6, -1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, 2, 2, 2, -1, 3, 3, 3, 3, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1, -1}, {-1, -1, -1, -1, 1, -1, -1, -1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, 2, 2, 2, 2, -1, 3, 3, 3, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5, -1}, {6, -1, -1, -1, -1, 1, -1, -1, -1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, 2, 2, 2, 2, 2, -1, 3, 3, -1, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1, 5}, {-1, 6, -1, -1, -1, -1, 1, -1, -1, -1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, -1, -1, -1, -1, -1, 6, 1, 7, 2, 2, 2, 2, 2, 2, -1, 3, -1, -1, -1, -1, -1, 4, 0, 5, -1, -1, -1, -1, 4, -1, 0, -1}, {-1, -1, 6, -1, -1, -1, -1, 1, -1, -1, -1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, -1, -1, -1, -1, -1, 6, 1, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, 4, 0, -1, -1, -1, -1, -1, 4, -1, 0}, {1, -1, -1, -1, -1, -1, 7, -1, 1, -1, -1, -1, -1, 7, -1, -1, 1, -1, -1, -1, 7, -1, -1, -1, 1, -1, -1, 7, -1, -1, -1, -1, 1, -1, 7, -1, -1, -1, -1, -1, 1, 7, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 0, 5, -1, -1, -1, -1, -1, -1}, {-1, 1, -1, -1, -1, -1, -1, 7, -1, 1, -1, -1, -1, -1, 7, -1, -1, 1, -1, -1, -1, 7, -1, -1, -1, 1, -1, -1, 7, -1, -1, -1, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, -1, -1, 2, -1, 3, 3, 3, 3, 3, 3, 4, 0, 5, -1, -1, -1, -1, -1}, {-1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 7, -1, -1, 1, -1, -1, -1, 7, -1, -1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, -1, 2, 2, -1, 3, 3, 3, 3, 3, -1, 4, 0, 5, -1, -1, -1, -1}, {-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 7, 6, -1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, 2, 2, 2, -1, 3, 3, 3, 3, -1, -1, 4, 0, 5, -1, -1, -1}, {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, 2, 2, 2, 2, -1, 3, 3, 3, -1, -1, -1, 4, 0, 5, -1, -1}, {-1, -1, -1, -1, -1, 1, -1, -1, 6, -1, -1, -1, -1, 1, -1, -1, -1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, 2, 2, 2, 2, 2, -1, 3, 3, -1, -1, -1, -1, 4, 0, 5, -1}, {6, -1, -1, -1, -1, -1, 1, -1, -1, 6, -1, -1, -1, -1, 1, -1, -1, -1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, -1, -1, -1, -1, -1, 6, 1, 7, 2, 2, 2, 2, 2, 2, -1, 3, -1, -1, -1, -1, -1, 4, 0, 5}, {-1, 6, -1, -1, -1, -1, -1, 1, -1, -1, 6, -1, -1, -1, -1, 1, -1, -1, -1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, -1, -1, -1, -1, -1, 6, 1, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, 4, 0}, {1, -1, -1, -1, -1, -1, -1, 7, 1, -1, -1, -1, -1, -1, 7, -1, 1, -1, -1, -1, -1, 7, -1, -1, 1, -1, -1, -1, 7, -1, -1, -1, 1, -1, -1, 7, -1, -1, -1, -1, 1, -1, 7, -1, -1, -1, -1, -1, 1, 7, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3}, {-1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 7, -1, 1, -1, -1, -1, -1, 7, -1, -1, 1, -1, -1, -1, 7, -1, -1, -1, 1, -1, -1, 7, -1, -1, -1, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, -1, -1, 2, -1, 3, 3, 3, 3, 3, 3}, {-1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 7, -1, -1, 1, -1, -1, -1, 7, -1, -1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, -1, 2, 2, -1, 3, 3, 3, 3, 3}, {-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 7, 6, -1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, -1, 2, 2, 2, -1, 3, 3, 3, 3}, {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, 7, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, -1, 2, 2, 2, 2, -1, 3, 3, 3}, {-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 6, -1, -1, -1, -1, 1, -1, -1, -1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, 7, -1, -1, -1, -1, 6, 1, 7, -1, 2, 2, 2, 2, 2, -1, 3, 3}, {-1, -1, -1, -1, -1, -1, 1, -1, 6, -1, -1, -1, -1, -1, 1, -1, -1, 6, -1, -1, -1, -1, 1, -1, -1, -1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, -1, -1, -1, -1, -1, 6, 1, 7, 2, 2, 2, 2, 2, 2, -1, 3}, {6, -1, -1, -1, -1, -1, -1, 1, -1, 6, -1, -1, -1, -1, -1, 1, -1, -1, 6, -1, -1, -1, -1, 1, -1, -1, -1, 6, -1, -1, -1, 1, -1, -1, -1, -1, 6, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, 1, -1, -1, -1, -1, -1, -1, 6, 1, 2, 2, 2, 2, 2, 2, 2, -1}};
        #endregion directionIdx

    }
}
